{"version":3,"sources":["components/Header.js","components/Form.js","components/Error.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","href","title","Form","cityRef","React","createRef","countryRef","seachWeather","e","preventDefault","result","city","_this","current","value","country","dataConsult","onSubmit","this","id","type","ref","htmlFor","defaultValue","Component","Error","message","Weather","showResult","_this$props$result","name","weather","main","urlIcon","concat","icon","alt","temp","toFixed","src","temp_max","temp_min","console","log","App","state","error","consult","apiConstult","_this$state$consult","url","fetch","then","rta","json","data","setState","catch","prevProps","prevState","cod","components_Error","Weather_Weather","components_Header","Form_Form","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.eafebd0b.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nconst Header = (props) => {\n  return (\n    <div>\n    <nav>\n    <div className=\"naw-wrapper light-blue darken-2\">\n    <a className=\"brand-logo\" href=\"#\">{props.title}</a>\n\n    </div>\n\n    </nav>\n    </div>\n  )\n}\n\nexport default Header;\n\nHeader.propTypes = {\n  title: PropTypes.string.isRequired\n}\n","import React,{Component} from 'react';\nimport PropTypes from 'prop-types'\n\nexport default class Form extends Component {\n\n\n  cityRef = React.createRef();\n  countryRef = React.createRef();\n\n  seachWeather = e => {\n    e.preventDefault();\n\n    const result = {\n      city: this.cityRef.current.value,\n      country: this.countryRef.current.value\n    }\n\n    this.props.dataConsult(result)\n  }\n\n  render() {\n    return (\n      <div className=\"contenedor-form\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <form onSubmit={this.seachWeather}>\n              <div className=\"input-field col s12 m8 l4 offset-m2\">\n                <input id=\"city\" type=\"text\" ref={this.cityRef}/>\n                <label htmlFor=\"city\">City: </label>\n              </div>\n              <div className=\"input-field col s12 m8 l4 offset-m2\">\n                <select ref={this.countryRef}>\n                  <option value=\"\" defaultValue>Choose a country</option>\n                  <option value=\"AR\">Argentina</option>\n                  <option value=\"CO\">Colombia</option>\n                  <option value=\"CR\">Costa Rica</option>\n                  <option value=\"ES\">Spain</option>\n                  <option value=\"US\">U.S.A.</option>\n                  <option value=\"MX\">Mexico</option>\n                  <option value=\"PE\">Peru</option>\n                </select>\n                <label htmlFor=\"country\">Country:</label>\n              </div>\n              <div className=\"input-field col s12 m8 l4 offset-2 buscador\">\n                <input type=\"submit\" className=\"waves-effect waves-light btn-large yellow accent-4\" value=\"Search...\"/>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nForm.propTypes = {\n  dataConsult: PropTypes.func.isRequired\n}\n","import React from 'react';\nimport ProptTypes from 'prop-types'\n\nconst Error = (props) => {\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col s12 m6 offset-3\">\n          <div className=\"card-panel red darken-4 error\">\n            {props.message}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Error\n\nError.propTypes = {\n  message: ProptTypes.string.isRequired\n}\n","import React,{Component} from 'react';\nimport PropTypes from 'prop-types'\n\nexport default class Weather extends Component {\n\n    showResult = () => {\n\n      const {name, weather, main} =this.props.result\n\n      if(!name || !weather || !main) return null;\n\n      const kelvin = 273.15;\n\n      const urlIcon =`http://openweathermap.org/img/w/${weather[0].icon}.png`;\n      const alt =`temperature in ${name}`\n      return (\n        <div className=\"row\">\n          <div className=\"resultado col s12 m8 l6 offset-m2 offset-l3\">\n            <div className=\"card-panel light-blue align-center\">\n              <span className=\"white-text\">\n                <h2>Weather in {name}</h2>\n                <p className=\"temperatura\">\n                  Temperature: { (main.temp - kelvin).toFixed(2) } &deg;C\n                  <img src={urlIcon} alt={alt}/>\n                </p>\n                <p>Max. { (main.temp_max - kelvin).toFixed(2) } &deg;C</p>\n                <p>Min. { (main.temp_min - kelvin).toFixed(2) } &deg;C</p>\n              </span>\n            </div>\n          </div>\n\n        </div>\n\n      )\n    }\n    render() {\n      console.log(this.props.result);\n        return (\n            <div className=\"container\">\n              {this.showResult()}\n            </div>\n        );\n    }\n}\n\nWeather.propTypes = {\n  result: PropTypes.object.isRequired\n}\n","import React,{Component} from 'react';\nimport Header from './components/Header'\nimport Form from './components/Form'\nimport Error from './components/Error'\nimport Weather from './components/Weather'\n\nexport default class App extends Component {\n\n  state = {\n    error: '',\n    consult: {},\n    result: {}\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.consult !== this.state.consult) {\n      this.apiConstult();\n    }\n  }\n  componentDidMount() {\n    this.setState({\n      error: false\n\n    })\n  }\n  apiConstult= ()=> {\n    const {city,country} = this.state.consult;\n\n    if (!city || !country) return null;\n\n    const appId = '1cc2a711e1e8c4d043ac67891033bfb6';\n    let url = `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${appId}`;\n\n    //quey with fetch api\n    fetch(url).then( rta => {\n      return rta.json()\n    }).then( data => {\n      this.setState({\n        result: data\n      })\n    }).catch(error => {\n      console.log(error);\n    })\n\n  }\n    dataConsult = rta => {\n      if (rta.city === '' || rta.country === '') {\n        this.setState({\n        error: true\n      })\n      } else {\n        this.setState({\n        consult: rta,\n        error: false\n      })\n      }\n\n    }\n\n    render() {\n\n      const {error} = this.state;\n      const {cod} = this.state.result;\n      console.log(cod);\n\n      let result;\n\n      if (error) {\n        result = <Error message='Complete both fields' />\n      } else if (cod === 404) {\n        result = <Error message=\"City not found\" />\n      } else {\n        result = <Weather result={this.state.result}/>\n      }\n\n        return (\n            <div className=\"app\">\n                <Header title={\"Weather App\"} />\n                <Form dataConsult = {this.dataConsult}/>\n                {result}\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}